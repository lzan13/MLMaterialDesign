apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.1'
    defaultConfig {
        applicationId "net.melove.demo.design"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }

    // 签名信息
    signingConfigs {
        // debug 打包签名信息
        debug {
            keyAlias 'debugKey'
            keyPassword '123123'
            storeFile file('debug-keystore.jks')
            storePassword '123123'
        }
        //  release 打包签名信息，因为签名文件是保密信息，放在一个配置文件中进行读取，这个文件不会再版本库里存在
        release {
            keyAlias keyAlias
            keyPassword keyPassword
            storeFile storeFile
            storePassword storePassword
        }
    }
    // 获取打包编译配置信息
    releaseConfigs();

    // 编译配置
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            //            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            minifyEnabled false
            zipAlignEnabled false
        }
        release {
            // 是否开启压缩
            zipAlignEnabled true
            // 是否开启混淆
            minifyEnabled true
            // 打包时删除无用资源 依赖于混淆，必须和 minifyEnabled 一起使用
            shrinkResources true
            // 设置正式打包的签名
            signingConfig signingConfigs.release
            // 混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //修改生成的apk名字，格式为 app-版本号-打包时间-渠道名-release.apk
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def oldFile = output.outputFile
                    if (variant.buildType.name.equals('release')) {
                        def releaseApkName = "app-v${defaultConfig.versionName}-${releaseTime()}-" +
                                variant.productFlavors[0].name +
                                '-release.apk'
                        output.outputFile = new File(oldFile.parent, releaseApkName)
                    }
                }
            }
        }
    }
    // 文件路径映射配置
    //    sourceSets {
    //        main {
    //            // 设置Jni so文件路径 如果有jniLibs目录就不需要设置
    //            jniLibs.srcDirs = ['libs']
    //        }
    //    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    productFlavors {
        XiaoMi {
            signingConfig signingConfigs.release
            manifestPlaceholders = [ML_CHANNEL_ID: "XiaoMi"]
        }
        WanDouJia {
            signingConfig signingConfigs.release
            manifestPlaceholders = [ML_CHANNEL_ID: "WanDouJia"]
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // Android 官方提供低版本兼容库
    // android Material Design 设计风格库，包含v7/v4/recyclerview/annotations/vector/等库
    compile 'com.android.support:design:25.0.1'
    // CardView 卡片风格控件库
    compile 'com.android.support:cardview-v7:25.0.1'

    // Firebase 消息推送依赖库
    compile 'com.google.firebase:firebase-messaging:9.6.1'

    // 引入 ButterKnife 库
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

    // square 出的网络加载库 retrofit
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    // 解析Html代码库
    compile 'org.jsoup:jsoup:1.9.2'

    // LeakCanary Debug库，开源捕获内存溢出的库
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    // LeakCanary 发版的库
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    // 观察者模式解耦库
    compile 'org.greenrobot:eventbus:3.0.0'

    // 七牛文件操作库
    compile 'com.qiniu:qiniu-android-sdk:7.3.2'

    // 第三方图片加载库
    compile 'com.github.bumptech.glide:glide:3.7.0'
}



/**
 * 读取配置文件
 **/
def releaseConfigs() {
    // 设置要读取的配置文件
    def propFile = file('app-config.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        // 判断签名配置信息是否存在
        if (props != null &&
                props.containsKey('ML_KEY_ALIAS') &&
                props.containsKey('ML_KEY_PASSWORD') &&
                props.containsKey('ML_STORE_FILE') &&
                props.containsKey('ML_STORE_PASSWORD')) {
            android.signingConfigs.release.keyAlias = props['ML_KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['ML_KEY_PASSWORD']
            android.signingConfigs.release.storeFile = file(props['ML_STORE_FILE'])
            android.signingConfigs.release.storePassword = props['ML_STORE_PASSWORD']
        } else {
            // 当配置文件签名项为空时，将 release 时的签名设置为null
            println 'app-config.properties 找不到签名项，检查配置文件'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        // 当配置文件为空时，将 release 时的签名设置为null
        println 'app-config.properties 找不到配置文件'
        android.buildTypes.release.signingConfig = null
    }
}

// 获取当前系统时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

// 这个必须添加在最下边，不然会造成 Google 相关依赖库冲突
apply plugin: 'com.google.gms.google-services'
